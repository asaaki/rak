#!/usr/bin/env ruby

require 'rubygems'
begin
  require 'oniguruma'
  $use_onig = true
rescue
  $use_onig = false
end

require 'rubygems'
require 'inline'

class Rack
  VERSION = "0.0.1"
  
  def self.search(str, dir="")
    re = Oniguruma::ORegexp.new(str)
    search_with_regexp(re, dir)
  end
  
  def self.search_with_regexp(re, dir="")
    rack = Rack.new
    Dir[dir+"**/*"].each do |fn|
      if File.directory? fn
        true
      else
        rack.match_file(re, fn)
      end
    end
  end
  
  inline do |builder|
    builder.include '"oniguruma.h"'
    builder.prefix "
     typedef struct _oregexp {
       regex_t * reg;
     } ORegexp;"

    builder.c "
    static VALUE match_file(VALUE re, char* filename) {
      ORegexp *oregexp;
      Data_Get_Struct( re, ORegexp, oregexp );
      FILE *fp = fopen(filename, \"r\");
      char line[10000];
      int i = 0;
      int found = 0;
      UChar* str_ptr = NULL;
      int str_len;
      OnigRegion *region = onig_region_new();
      while (fgets(line, 10000, fp) && line) {
        i++;
        str_ptr = (UChar*) &line; //&my_args;
        str_len = strlen(str_ptr);
        int r = onig_search(oregexp->reg, str_ptr, str_ptr + str_len, str_ptr + 0, str_ptr + str_len, region, ONIG_OPTION_NONE);
        if (r != -1) {
          printf(\"%d\", i);
          found = 1;
        }
      }
      fclose(fp);
      if (found) 
        puts(filename);
      return rb_intern(\"foo\");
    }"
  end
end

p /#{ARGV[0]}/

Rack.search ARGV[0]
