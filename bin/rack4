#!/usr/bin/env ruby

require 'rubygems'
begin
  require 'oniguruma'
  $use_onig = true
rescue
  $use_onig = false
end

require 'rubygems'
require 'inline'

class Rack
  VERSION = "0.0.1"
  
  def self.search(str, dir="")
    re = Oniguruma::ORegexp.new(str)
    p re.instance_variables
    search_with_regexp(re, dir)
  end
  
  def self.search_with_regexp(re, dir="")
    rack = Rack.new
    Dir[dir+"**/*"].each do |fn|
      if File.directory? fn
        true
      else
        rack.match_file(re, fn)
#         File.open(fn) do |f|
#           found = []
#           ln = 0
#           f.each_line do |line|
# #            if line =~ re
#             ln += 1
#             if rack.match(re, line)
#                 found << ln
#             end
#           end
#           puts fn+":"+found.inspect unless found.empty?
#         end
      end
    end
  end
  
  inline do |builder|
    builder.include '"oniguruma.h"'
    builder.prefix "
     typedef struct _oregexp {
       regex_t * reg;
     } ORegexp;"

    builder.c "
    static VALUE match_file(VALUE re, char* filename) {
      FILE *fp = fopen(filename, \"r\");
      char line[1000];
      int i = 0;
      VALUE my_args[1];
      VALUE match_data;
      int found = 0;
      while (fgets(line, 1000, fp) && line) {
        i++;
        my_args[0] = rb_str_new2(line);
        match_data = rb_funcall(re, rb_intern(\"match\"), 1, *my_args);
        if (match_data != Qnil) {
          printf(\"%d\", i);
          found = 1;
        }
      }
      fclose(fp);
      onig_region_free(region, 1 );
      if (found) 
        puts(filename);
      return rb_intern(\"foo\");
    }"
  end
  
  inline do |builder|
    builder.c "
    static VALUE match(VALUE re, VALUE str) {
      VALUE my_args[] = {str};
      VALUE match_data = rb_funcall(re, rb_intern(\"match\"), 1, *my_args);
      return match_data;
    }"
  end
end

p /#{ARGV[0]}/

Rack.search ARGV[0]
